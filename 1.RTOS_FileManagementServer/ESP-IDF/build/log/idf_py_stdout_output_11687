[1/5] cd /Users/vanshajshah/Documents/Programming/code/Embedded-Systems/1.RTOS_FileManagementServer/ESP-IDF/build/esp-idf/esptool_py && /Users/vanshajshah/.espressif/python_env/idf5.4_py3.11_env/bin/python /Users/vanshajshah/esp/v5.4.2/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /Users/vanshajshah/Documents/Programming/code/Embedded-Systems/1.RTOS_FileManagementServer/ESP-IDF/build/partition_table/partition-table.bin /Users/vanshajshah/Documents/Programming/code/Embedded-Systems/1.RTOS_FileManagementServer/ESP-IDF/build/ESP-IDF.bin
ESP-IDF.bin binary size 0x32ca0 bytes. Smallest app partition is 0x100000 bytes. 0xcd360 bytes (80%) free.
[2/5] Performing build step for 'bootloader'
[1/1] cd /Users/vanshajshah/Documents/Programming/code/Embedded-Systems/1.RTOS_FileManagementServer/ESP-IDF/build/bootloader/esp-idf/esptool_py && /Users/vanshajshah/.espressif/python_env/idf5.4_py3.11_env/bin/python /Users/vanshajshah/esp/v5.4.2/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 /Users/vanshajshah/Documents/Programming/code/Embedded-Systems/1.RTOS_FileManagementServer/ESP-IDF/build/bootloader/bootloader.bin
Bootloader binary size 0x51c0 bytes. 0x2e40 bytes (36%) free.
[3/5] No install step for 'bootloader'
[4/5] Completed 'bootloader'
[4/5] cd /Users/vanshajshah/esp/v5.4.2/esp-idf/components/esptool_py && /opt/homebrew/bin/cmake -D IDF_PATH=/Users/vanshajshah/esp/v5.4.2/esp-idf -D "SERIAL_TOOL=/Users/vanshajshah/.espressif/python_env/idf5.4_py3.11_env/bin/python;;/Users/vanshajshah/esp/v5.4.2/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32s3" -D "SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args" -D WORKING_DIRECTORY=/Users/vanshajshah/Documents/Programming/code/Embedded-Systems/1.RTOS_FileManagementServer/ESP-IDF/build -P /Users/vanshajshah/esp/v5.4.2/esp-idf/components/esptool_py/run_serial_tool.cmake
esptool.py --chip esp32s3 -p /dev/tty.usbmodem101 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 80m --flash_size 2MB 0x0 bootloader/bootloader.bin 0x10000 ESP-IDF.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.9.0
Serial port /dev/tty.usbmodem101
Connecting...
Chip is ESP32-S3 (QFN56) (revision v0.2)
Features: WiFi, BLE, Embedded PSRAM 8MB (AP_3v3)
Crystal is 40MHz
USB mode: USB-Serial/JTAG
MAC: 30:ed:a0:a8:d5:ac
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00000000 to 0x00005fff...
Flash will be erased from 0x00010000 to 0x00042fff...
Flash will be erased from 0x00008000 to 0x00008fff...
SHA digest in image updated
Compressed 20928 bytes to 13328...
Writing at 0x00000000... (100 %)
Wrote 20928 bytes (13328 compressed) at 0x00000000 in 0.4 seconds (effective 431.5 kbit/s)...
Hash of data verified.
Compressed 208032 bytes to 110976...
Writing at 0x00010000... (14 %)
Writing at 0x0001c9e4... (28 %)
Writing at 0x00022b88... (42 %)
Writing at 0x00028ed6... (57 %)
Writing at 0x0002fb38... (71 %)
Writing at 0x00037911... (85 %)
Writing at 0x0003dbc8... (100 %)
Wrote 208032 bytes (110976 compressed) at 0x00010000 in 2.1 seconds (effective 811.1 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 341.5 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
